// import { ReadManysupplierService } from "@src/modules/supplier/services/read-many.js";
import request from "supertest";
import { createApp } from "@src/app.js";

describe("create supplier", () => {
  it("should check user is authorized", async () => {
    const app = await createApp();
    // send request to create supplier
    const response = await request(app).post("/v1/suppliers").send({});
    expect(response.statusCode).toEqual(401);
    expect(response.body.code).toBe(401);
    expect(response.body.status).toBe("Unauthorized");
    expect(response.body.message).toBe("Authentication credentials is invalid.");
  });
  it("should check user have permission to access", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "user",
      password: "admin123",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create supplier
    const response = await request(app).post("/v1/suppliers").send({}).set("Authorization", `Bearer ${accessToken}`);
    expect(response.statusCode).toEqual(403);
    expect(response.body.code).toBe(403);
    expect(response.body.status).toBe("Forbidden");
    expect(response.body.message).toBe("Don't have necessary permissions for this resource.");
  });
  it("should check required fields", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin123",
    });
    // send request to create supplier
    const accessToken = authResponse.body.accessToken;
    // do not send all required fields
    const response = await request(app).post("/v1/suppliers").send({}).set("Authorization", `Bearer ${accessToken}`);
    expect(response.statusCode).toEqual(422);
    expect(response.body.code).toBe(422);
    expect(response.body.status).toBe("Unprocessable Entity");
    expect(response.body.message).toBe(
      "The request was well-formed but was unable to be followed due to semantic errors."
    );
    expect(response.body.errors.name).toEqual(["The name field is required."]);
  });
  it("should check unique fields", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin123",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create supplier
    const data = {
      code: "CS18",
      name: "John Doe18",
    };
    await request(app).post("/v1/suppliers").send(data).set("Authorization", `Bearer ${accessToken}`);
    const response = await request(app).post("/v1/suppliers").send(data).set("Authorization", `Bearer ${accessToken}`);
    expect(response.statusCode).toEqual(422);
    expect(response.body.status).toBe("Unprocessable Entity");

    expect(response.body.message).toBe(
      "The request was well-formed but was unable to be followed due to semantic errors."
    );
    expect(response.body.errors.code).toEqual(["code is exists"]);
    expect(response.body.errors.name).toEqual(["name is exists"]);
  });
  it("should save to database", async () => {
    const app = await createApp();
    // get access token for authorization request
    const authResponse = await request(app).post("/v1/auth/signin").send({
      username: "admin",
      password: "admin123",
    });
    const accessToken = authResponse.body.accessToken;
    // send request to create supplier
    const data = {
      code: "CS8",
      name: "John Doe8",
      email: "johndoe@example.com",
      address: "21 Street",
      phone: "08123456789",
    };
    const response = await request(app).post("/v1/suppliers").send(data).set("Authorization", `Bearer ${accessToken}`);
    // expected response status
    expect(response.statusCode).toEqual(201);
    // expected response body
    expect(response.body._id).not.toBeNull();
    // expected database data by user input
    const responseGet = await request(app)
      .get("/v1/suppliers/" + response.body._id)
      .set("Authorization", `Bearer ${accessToken}`);
    expect(responseGet.body.data.code).toEqual(data.code);
    expect(responseGet.body.data.name).toEqual(data.name);
    expect(responseGet.body.data.email).toEqual(data.email);
    expect(responseGet.body.data.address).toEqual(data.address);
    expect(responseGet.body.data.phone).toEqual(data.phone);
    // expected database data generated by system
  });
});
